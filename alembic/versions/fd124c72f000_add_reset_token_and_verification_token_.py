"""add reset_token and verification_token columns to users

Revision ID: fd124c72f000
Revises: 87ae90c02aad
Create Date: 2025-07-17 21:37:21.886747

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = 'fd124c72f000'
down_revision: Union[str, None] = '87ae90c02aad'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Only add the new columns to users table for SQLite compatibility
    op.add_column('users', sa.Column('reset_token', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('reset_token_expires', sa.String(), nullable=True))
    op.add_column('users', sa.Column('verification_token', sa.String(length=100), nullable=True))
    op.add_column('users', sa.Column('verification_token_expires', sa.String(), nullable=True))
    # All other schema changes are skipped for SQLite


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'verification_token_expires')
    op.drop_column('users', 'verification_token')
    op.drop_column('users', 'reset_token_expires')
    op.drop_column('users', 'reset_token')
    op.alter_column('user_roles', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('user_roles', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('user_roles', 'deleted_at')
    op.drop_column('user_roles', 'is_deleted')
    op.alter_column('usage_allocations', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('usage_allocations', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('usage_allocations', 'deleted_at')
    op.drop_column('usage_allocations', 'is_deleted')
    op.alter_column('roles', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('roles', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('role_permissions', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('role_permissions', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('role_permissions', 'deleted_at')
    op.drop_column('role_permissions', 'is_deleted')
    op.alter_column('organizations', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('organizations', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('organizations', 'plan_type',
               existing_type=sa.Enum('FREE', 'STARTER', 'PROFESSIONAL', 'ENTERPRISE', name='plantype'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False)
    op.alter_column('cost_centers', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('cost_centers', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('cost_centers', 'deleted_at')
    op.drop_column('cost_centers', 'is_deleted')
    op.add_column('audit_logs', sa.Column('metadata', sqlite.JSON(), nullable=True))
    op.alter_column('audit_logs', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('audit_logs', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('audit_logs', 'deleted_at')
    op.drop_column('audit_logs', 'is_deleted')
    op.drop_column('audit_logs', 'additional_metadata')
    op.create_index('idx_ab_tests_status', 'ab_tests', ['status'], unique=False)
    op.create_index('idx_ab_tests_org', 'ab_tests', ['organization_id'], unique=False)
    op.alter_column('ab_tests', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ab_tests', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.drop_column('ab_tests', 'deleted_at')
    op.drop_column('ab_tests', 'is_deleted')
    op.create_index('idx_ab_test_results_variant', 'ab_test_results', ['variant'], unique=False)
    op.create_index('idx_ab_test_results_test', 'ab_test_results', ['test_id'], unique=False)
    op.alter_column('ab_test_results', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ab_test_results', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ab_test_results', 'success',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('ab_test_results', 'metrics',
               existing_type=sqlite.JSON(),
               nullable=True)
    op.alter_column('ab_test_results', 'variant',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.drop_column('ab_test_results', 'deleted_at')
    op.drop_column('ab_test_results', 'is_deleted')
    op.create_foreign_key(None, 'ab_test_executions', 'users', ['user_id'], ['id'])
    op.create_index('idx_ab_test_executions_test', 'ab_test_executions', ['test_id'], unique=False)
    op.alter_column('ab_test_executions', 'updated_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ab_test_executions', 'created_at',
               existing_type=sa.DATETIME(),
               nullable=True,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
    op.alter_column('ab_test_executions', 'variant',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=10),
               existing_nullable=False)
    op.alter_column('ab_test_executions', 'user_id',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=36),
               existing_nullable=False)
    op.drop_column('ab_test_executions', 'deleted_at')
    op.drop_column('ab_test_executions', 'is_deleted')
    op.create_table('workflow_executions',
    sa.Column('id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('workflow_id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('organization_id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('input_data', sqlite.JSON(), nullable=True),
    sa.Column('output_data', sqlite.JSON(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=True),
    sa.Column('started_at', sa.DATETIME(), nullable=True),
    sa.Column('completed_at', sa.DATETIME(), nullable=True),
    sa.Column('error_message', sa.TEXT(), nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), nullable=True),
    sa.Column('total_cost', sa.INTEGER(), nullable=True),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_workflow_executions_workflow', 'workflow_executions', ['workflow_id'], unique=False)
    op.create_index('idx_workflow_executions_status', 'workflow_executions', ['status'], unique=False)
    op.create_index('idx_workflow_executions_org', 'workflow_executions', ['organization_id'], unique=False)
    op.create_table('workflows',
    sa.Column('id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('organization_id', sa.VARCHAR(length=36), nullable=False),
    sa.Column('name', sa.VARCHAR(length=200), nullable=False),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('definition', sqlite.JSON(), nullable=False),
    sa.Column('version', sa.INTEGER(), nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=36), nullable=False),
    sa.Column('created_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DATETIME(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
